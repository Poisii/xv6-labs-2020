1.哪些寄存器保存函数的参数？例如，在main对printf的调用中，哪个寄存器保存13？
A:  在RISC-V中，a0到a7寄存器用于存放函数的前八个参数。
    对于 printf("13")，参数 13 存储在 a2 寄存器中。


2.main的汇编代码中对函数f的调用在哪里？对g的调用在哪里(提示：编译器可能会将函数内联）
A:  在 C 代码中，main 调用f，而f调用g。
    但是，由于编译器的内联优化，生成的汇编代码中直接计算了 f(8) + 1 的结果，
    省去了对 g 函数的显式调用。


3.printf函数位于哪个地址？
A:通过 auipc ra, 0x0 和 jalr 指令，程序跳转到 printf 的地址 0x630。


4.在main中printf的jalr之后的寄存器ra中有什么值？
A:执行 jalr 指令后，ra 寄存器保存了返回地址，即 0x34 + 0x4 = 0x38，这将用于函数返回时跳回。


5.运行以下代码。
unsigned int i = 0x00646c72;
printf("H%x Wo%s", 57616, &i);
程序的输出是什么？这是将字节映射到字符的ASCII码表。
输出取决于RISC-V小端存储的事实。如果RISC-V是大端存储，为了得到相同的输出，你会把i设置成什么？是否需要将57616更改为其他值？
A:  在小端存储中，0x00646c72 的字节顺序为 72 6c 64 00，按 ASCII 显示会输出 HE110 World。
    如果改为大端存储，则 i 应设置为 0x726c6400，而 57616 不需要修改。


6.在下面的代码中，“y=”之后将打印什么(注：答案不是一个特定的值）？为什么会发生这种情况？
printf("x=%d y=%d", 3);
A:printf("x=%d y=%d", 3) 中，y 的值未被传入，因此它会打印出未定义的内容，这取决于程序运行时 a2 寄存器中的值。